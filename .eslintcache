[{"E:\\Coursera_React\\React\\confusio\\src\\redux\\leaders.js":"1","E:\\Coursera_React\\React\\confusio\\src\\components\\MainComponent.js":"2","E:\\Coursera_React\\React\\confusio\\src\\components\\HomeComponent.js":"3","E:\\Coursera_React\\React\\confusio\\src\\components\\AboutComponent.js":"4","E:\\Coursera_React\\React\\confusio\\src\\redux\\ActionCreators.js":"5","E:\\Coursera_React\\React\\confusio\\src\\components\\ContactComponent.js":"6","E:\\Coursera_React\\React\\confusio\\src\\App.js":"7","E:\\Coursera_React\\React\\confusio\\src\\redux\\promotions.js":"8","E:\\Coursera_React\\React\\confusio\\src\\components\\HeaderComponent.js":"9","E:\\Coursera_React\\React\\confusio\\src\\components\\DishdetailComponent.js":"10","E:\\Coursera_React\\React\\confusio\\src\\redux\\dishes.js":"11","E:\\Coursera_React\\React\\confusio\\src\\components\\LoadingComponent.js":"12","E:\\Coursera_React\\React\\confusio\\src\\components\\MenuComponent.js":"13","E:\\Coursera_React\\React\\Confusio\\src\\index.js":"14","E:\\Coursera_React\\React\\Confusio\\src\\components\\HeaderComponent.js":"15","E:\\Coursera_React\\React\\Confusio\\src\\components\\FooterComponent.js":"16","E:\\Coursera_React\\React\\Confusio\\src\\components\\HomeComponent.js":"17","E:\\Coursera_React\\React\\Confusio\\src\\redux\\dishes.js":"18","E:\\Coursera_React\\React\\Confusio\\src\\components\\AboutComponent.js":"19","E:\\Coursera_React\\React\\Confusio\\src\\components\\LoadingComponent.js":"20","E:\\Coursera_React\\React\\Confusio\\src\\redux\\ActionTypes.js":"21","E:\\Coursera_React\\React\\Confusio\\src\\shared\\baseUrl.js":"22","E:\\Coursera_React\\React\\Confusio\\src\\shared\\dishes.js":"23","E:\\Coursera_React\\React\\Confusio\\src\\components\\MainComponent.js":"24","E:\\Coursera_React\\React\\Confusio\\src\\components\\DishdetailComponent.js":"25","E:\\Coursera_React\\React\\Confusio\\src\\redux\\comments.js":"26","E:\\Coursera_React\\React\\confusio\\src\\shared\\baseUrl.js":"27","E:\\Coursera_React\\React\\confusio\\src\\reportWebVitals.js":"28"},{"size":529,"mtime":1622523282953,"results":"29","hashOfConfig":"30"},{"size":4607,"mtime":1622561160251,"results":"31","hashOfConfig":"30"},{"size":1999,"mtime":1622523801462,"results":"32","hashOfConfig":"30"},{"size":5991,"mtime":1622527537681,"results":"33","hashOfConfig":"30"},{"size":6273,"mtime":1622560839907,"results":"34","hashOfConfig":"30"},{"size":19306,"mtime":1622564817339,"results":"35","hashOfConfig":"30"},{"size":1358,"mtime":1622448428907,"results":"36","hashOfConfig":"30"},{"size":525,"mtime":1622458950966,"results":"37","hashOfConfig":"30"},{"size":5203,"mtime":1622448771509,"results":"38","hashOfConfig":"30"},{"size":8665,"mtime":1622462329493,"results":"39","hashOfConfig":"30"},{"size":600,"mtime":1622378241123,"results":"40","hashOfConfig":"30"},{"size":254,"mtime":1622378238065,"results":"41","hashOfConfig":"30"},{"size":3463,"mtime":1622621080140,"results":"42","hashOfConfig":"30"},{"size":722,"mtime":1622451201741,"results":"43","hashOfConfig":"44"},{"size":5203,"mtime":1622448771509,"results":"45","hashOfConfig":"44"},{"size":2684,"mtime":1622448500418,"results":"46","hashOfConfig":"44"},{"size":1999,"mtime":1622523801462,"results":"47","hashOfConfig":"44"},{"size":600,"mtime":1622378241123,"results":"48","hashOfConfig":"44"},{"size":5991,"mtime":1622527537681,"results":"49","hashOfConfig":"44"},{"size":254,"mtime":1622378238065,"results":"50","hashOfConfig":"44"},{"size":560,"mtime":1622522272911,"results":"51","hashOfConfig":"44"},{"size":48,"mtime":1622457265696,"results":"52","hashOfConfig":"44"},{"size":1582,"mtime":1608462241804,"results":"53","hashOfConfig":"44"},{"size":4607,"mtime":1622561160251,"results":"54","hashOfConfig":"44"},{"size":8665,"mtime":1622462329493,"results":"55","hashOfConfig":"44"},{"size":581,"mtime":1622459824487,"results":"56","hashOfConfig":"44"},{"size":48,"mtime":1622457265696,"results":"57","hashOfConfig":"30"},{"size":362,"mtime":499162500000,"results":"58","hashOfConfig":"30"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},"w2d533",{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"61"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"61"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},"1dph21a",{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\Coursera_React\\React\\confusio\\src\\redux\\leaders.js",[],["121","122"],"E:\\Coursera_React\\React\\confusio\\src\\components\\MainComponent.js",[],"E:\\Coursera_React\\React\\confusio\\src\\components\\HomeComponent.js",[],["123","124"],"E:\\Coursera_React\\React\\confusio\\src\\components\\AboutComponent.js",[],"E:\\Coursera_React\\React\\confusio\\src\\redux\\ActionCreators.js",["125"],"import * as ActionTypes from './ActionTypes';\r\nimport { DISHES } from '../shared/dishes';\r\nimport { baseUrl } from '../shared/baseUrl';\r\n\r\n\r\nexport const addComment = (comment) => ({\r\n    type: ActionTypes.ADD_COMMENT,\r\n    payload: comment\r\n});\r\n\r\nexport const postComment = (dishId, rating, author, comment) => (dispatch) => {\r\n\r\n    const newComment = {\r\n        dishId: dishId,\r\n        rating: rating,\r\n        author: author,\r\n        comment: comment\r\n    };\r\n    newComment.date = new Date().toISOString();\r\n    \r\n    return fetch(baseUrl + 'comments', {\r\n        method: \"POST\",\r\n        body: JSON.stringify(newComment),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        credentials: \"same-origin\"\r\n    })\r\n    .then(response => {\r\n        if (response.ok) {\r\n          return response;\r\n        } else {\r\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n          error.response = response;\r\n          throw error;\r\n        }\r\n      },\r\n      error => {\r\n            throw error;\r\n      })\r\n    .then(response => response.json())\r\n    .then(response => dispatch(addComment(response)))\r\n    .catch(error =>  { console.log('post comments', error.message); alert('Your comment could not be posted\\nError: '+error.message); });\r\n};\r\n\r\nexport const fetchDishes = () => (dispatch) => {\r\n\r\n    dispatch(dishesLoading(true));\r\n\r\n    return fetch(baseUrl + 'dishes')\r\n    .then(response => {\r\n        if (response.ok) {\r\n          return response;\r\n        } else {\r\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n          error.response = response;\r\n          throw error;\r\n        }\r\n      },\r\n      error => {\r\n            var errmess = new Error(error.message);\r\n            throw errmess;\r\n      })\r\n    .then(response => response.json())\r\n    .then(dishes => dispatch(addDishes(dishes)))\r\n    .catch(error => dispatch(dishesFailed(error.message)));\r\n}\r\n\r\nexport const dishesLoading = () => ({\r\n    type: ActionTypes.DISHES_LOADING\r\n});\r\n\r\nexport const dishesFailed = (errmess) => ({\r\n    type: ActionTypes.DISHES_FAILED,\r\n    payload: errmess\r\n});\r\n\r\nexport const addDishes = (dishes) => ({\r\n    type: ActionTypes.ADD_DISHES,\r\n    payload: dishes\r\n});\r\n\r\nexport const fetchComments = () => (dispatch) => {    \r\n    return fetch(baseUrl + 'comments')\r\n    .then(response => {\r\n        if (response.ok) {\r\n          return response;\r\n        } else {\r\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n          error.response = response;\r\n          throw error;\r\n        }\r\n      },\r\n      error => {\r\n            var errmess = new Error(error.message);\r\n            throw errmess;\r\n      })\r\n    .then(response => response.json())\r\n    .then(comments => dispatch(addComments(comments)))\r\n    .catch(error => dispatch(commentsFailed(error.message)));\r\n};\r\n\r\nexport const commentsFailed = (errmess) => ({\r\n    type: ActionTypes.COMMENTS_FAILED,\r\n    payload: errmess\r\n});\r\n\r\nexport const addComments = (comments) => ({\r\n    type: ActionTypes.ADD_COMMENTS,\r\n    payload: comments\r\n    \r\n});\r\nexport const fetchPromos = () => (dispatch) => {\r\n    \r\n    dispatch(promosLoading(true));\r\n\r\n    return fetch(baseUrl + 'promotions')\r\n    .then(response => {\r\n        if (response.ok) {\r\n          return response;\r\n        } else {\r\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n          error.response = response;\r\n          throw error;\r\n        }\r\n      },\r\n      error => {\r\n            var errmess = new Error(error.message);\r\n            throw errmess;\r\n      })\r\n    .then(response => response.json())\r\n    .then(promos => dispatch(addPromos(promos)))\r\n    .catch(error => dispatch(promosFailed(error.message)));\r\n}\r\n\r\nexport const promosLoading = () => ({\r\n    type: ActionTypes.PROMOS_LOADING\r\n});\r\nexport const promosFailed = (errmess) => ({\r\n    type: ActionTypes.PROMOS_FAILED,\r\n    payload: errmess\r\n});\r\n\r\nexport const addPromos = (promos) => ({\r\n    type: ActionTypes.ADD_PROMOS,\r\n    payload: promos\r\n});\r\n\r\nexport const fetchLeaders = () => (dispatch) => {\r\n  dispatch(leadersLoading(true));\r\n  return fetch(baseUrl + 'leaders')\r\n    .then(response => {\r\n      if (response.ok) {\r\n        return response;\r\n      }\r\n      else {\r\n        var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n        error.response = response;\r\n        throw error;\r\n      }\r\n    },\r\n    error => {\r\n      var errmess = new Error(error.message);\r\n      throw errmess;\r\n    })\r\n    .then(response => response.json())\r\n    .then(promos => dispatch(addLeaders(promos)))\r\n    .catch(error => dispatch(leadersFailed(error.message)));\r\n};\r\n\r\nexport const leadersLoading = () => ({\r\n  type: ActionTypes.LEADERS_LOADING\r\n});\r\n\r\nexport const leadersFailed = (errmess) => ({\r\n  type: ActionTypes.LEADERS_FAILED,\r\n  payload: errmess\r\n});\r\n\r\nexport const addLeaders = (leaders) => ({\r\n  type: ActionTypes.ADD_LEADERS,\r\n  payload: leaders\r\n});\r\n\r\nexport const postFeedback = (firstname, lastname, telnum, email, agree, contactType, message) => (dispatch) => {\r\n\r\n  const newFeedback = {\r\n    firstname: firstname,\r\n    lastname: lastname,\r\n    telnum: telnum,\r\n    email: email,\r\n    agree: agree,\r\n    contactType: contactType,\r\n    message: message,\r\n  }\r\n  newFeedback.date = new Date().toISOString();\r\n\r\n  return fetch(baseUrl + 'feedback', {\r\n      method: 'POST',\r\n      body: JSON.stringify(newFeedback),\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      credentials: 'same-origin'\r\n    })\r\n    .then(response => {\r\n      if (response.ok) {\r\n        return response;\r\n      }\r\n      else {\r\n        var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n        error.response = response;\r\n        throw error;\r\n      }\r\n    },\r\n    error => {\r\n      var errmess = new Error(error.message);\r\n      throw errmess;\r\n    })\r\n    .then(response => response.json())\r\n    .then(response => {alert(response); return response;})\r\n    .catch(error => {\r\n      console.log('post feedback ', error.message);\r\n      alert('Your feedback could not be posted\\nError: ' + error.message);\r\n    });\r\n\r\n};","E:\\Coursera_React\\React\\confusio\\src\\components\\ContactComponent.js",["126","127","128","129","130","131","132","133","134"],"import React, {Component} from 'react';\r\nimport { Breadcrumb, BreadcrumbItem,\r\n    Button, Row, Col, Label  } from 'C:/Users/vivek/node_modules/reactstrap';\r\nimport { Link } from 'C:/Users/vivek/node_modules/react-router-dom';\r\nimport {  Control, Form, Errors, actions  } from 'C:/Users/vivek/node_modules/react-redux-form';\r\n\r\nconst required = (val) => val && val.length;\r\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\r\nconst minLength = (len) => (val) => val && (val.length >= len);\r\nconst isNumber = (val) => !isNaN(Number(val));\r\nconst validEmail = (val) => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\r\nclass Contact extends Component {\r\n     constructor(props){\r\n         super(props);\r\n        /* this.state = {\r\n            firstname: '',\r\n            lastname: '',\r\n            telnum: '',\r\n            email: '',\r\n            agree: false,\r\n            contactType: 'Tel.',\r\n            message: '',\r\n            touched: {\r\n                firstname: false,\r\n                lastname: false,\r\n                telnum: false,\r\n                email: false\r\n            }\r\n        };*/\r\n\r\n        //this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        //this.handleBlur = this.handleBlur.bind(this);\r\n        \r\n    }\r\n   /* handleBlur = (field) => (evt) => {\r\n        this.setState({\r\n            touched: { ...this.state.touched, [field]: true }\r\n        });\r\n    }\r\n\r\n    validate(firstname, lastname, telnum, email) {\r\n        const errors = {\r\n            firstname: '',\r\n            lastname: '',\r\n            telnum: '',\r\n            email: ''\r\n        };\r\n\r\n        if (this.state.touched.firstname && firstname.length < 3)\r\n            errors.firstname = 'First Name should be >= 3 characters';\r\n        else if (this.state.touched.firstname && firstname.length > 10)\r\n            errors.firstname = 'First Name should be <= 10 characters';\r\n\r\n        if (this.state.touched.lastname && lastname.length < 3)\r\n            errors.lastname = 'Last Name should be >= 3 characters';\r\n        else if (this.state.touched.lastname && lastname.length > 10)\r\n            errors.lastname = 'Last Name should be <= 10 characters';\r\n\r\n        const reg = /^\\d+$/;\r\n        if (this.state.touched.telnum && !reg.test(telnum))\r\n            errors.telnum = 'Tel. Number should contain only numbers';\r\n            if(this.state.touched.email && email.split('').filter(x => x === '@').length !== 1)\r\n            errors.email = 'Email should contain a @';\r\n\r\n        return errors;\r\n    }\r\n\r\n    handleInputChange(event) {\r\n        const target = event.target;\r\n        const value = target.type === 'checkbox' ? target.checked : target.value;\r\n        const name = target.name;\r\n    \r\n        this.setState({\r\n          [name]: value\r\n        });\r\n    }*/\r\n    handleSubmit(values) {\r\n        console.log('Current State is: ' + JSON.stringify(values));\r\n        alert('Thank you for your feedback!\\n ' + JSON.stringify(values));\r\n      // event.preventDefault();\r\n      this.props.postFeedback(values.firstname, values.lastname, \r\n        values.telnum, values.email, values.agree, values.contactType, values.message);\r\n       this.props.resetFeedbackForm();\r\n    }\r\n     \r\n    render(){\r\n        //const errors= this.validate(this.state.firstname, this.state.lastname,this.state.telnum,this.state.email );\r\n        return(\r\n            <div className=\"container\">\r\n                 <div className=\"row\">\r\n                    <Breadcrumb>\r\n                        <BreadcrumbItem><Link to=\"/home\">Home</Link></BreadcrumbItem>\r\n                        <BreadcrumbItem active>Contact Us</BreadcrumbItem>\r\n                    </Breadcrumb>\r\n                    <div className=\"col-12\">\r\n                        <h3>Contact Us</h3>\r\n                        <hr />\r\n                    </div>                \r\n                </div>\r\n                <div className=\"row row-content\">\r\n                    <div className=\"col-12\">\r\n                    <h3>Location Information</h3>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-4 offset-sm-1\">\r\n                            <h5>Our Address</h5>\r\n                            <address>\r\n                            121, Clear Water Bay Road<br />\r\n                            Clear Water Bay, Kowloon<br />\r\n                            HONG KONG<br />\r\n                            <i className=\"fa fa-phone\"></i>: +852 1234 5678<br />\r\n                            <i className=\"fa fa-fax\"></i>: +852 8765 4321<br />\r\n                            <i className=\"fa fa-envelope\"></i>: <a href=\"mailto:confusion@food.net\">confusion@food.net</a>\r\n                            </address>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-6 offset-sm-1\">\r\n                        <h5>Map of our Location</h5>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-11 offset-sm-1\">\r\n                        <div className=\"btn-group\" role=\"group\">\r\n                            <a role=\"button\" className=\"btn btn-primary\" href=\"tel:+85212345678\"><i className=\"fa fa-phone\"></i> Call</a>\r\n                            <a role=\"button\" className=\"btn btn-info\"><i className=\"fa fa-skype\"></i> Skype</a>\r\n                            <a role=\"button\" className=\"btn btn-success\" href=\"mailto:confusion@food.net\"><i className=\"fa fa-envelope-o\"></i> Email</a>\r\n                        </div>\r\n                        </div>\r\n                </div>\r\n                <div className=\"row row-content\">\r\n                   <div className=\"col-12 \">\r\n                      <h3>Send us your Feedback</h3>\r\n                   </div>\r\n                    <div className=\"col-12 col-md-9\">\r\n                    <Form  model=\"feedback\"  onSubmit={(values) => this.handleSubmit(values)}>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"firstname\" md={2}>First Name</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".firstname\" id=\"firstname\" name=\"firstname\"\r\n                                        placeholder=\"First Name\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, minLength: minLength(3), maxLength: maxLength(15)\r\n                                        }}\r\n                                         />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".firstname\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be greater than 2 characters',\r\n                                            maxLength: 'Must be 15 characters or less'\r\n                                        }}\r\n                                     />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"lastname\" md={2}>Last Name</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".lastname\" id=\"lastname\" name=\"lastname\"\r\n                                        placeholder=\"Last Name\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, minLength: minLength(3), maxLength: maxLength(15)\r\n                                        }}\r\n                                         />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".lastname\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be greater than 2 characters',\r\n                                            maxLength: 'Must be 15 characters or less'\r\n                                        }}\r\n                                     />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"telnum\" md={2}>Contact Tel.</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".telnum\" id=\"telnum\" name=\"telnum\"\r\n                                        placeholder=\"Tel. Number\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required , minLength: minLength(3), maxLength: maxLength(15), isNumber\r\n                                        }}\r\n                                         />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".telnum\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be greater than 2 numbers',\r\n                                            maxLength: 'Must be 15 numbers or less',\r\n                                            isNumber: 'Must be a number'\r\n                                        }}\r\n                                     />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"email\" md={2}>Email</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".email\" id=\"email\" name=\"email\"\r\n                                        placeholder=\"Email\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, validEmail\r\n                                        }}\r\n                                         />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".email\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            validEmail: 'Invalid Email Address'\r\n                                        }}\r\n                                     />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Col mod={{size: 3, offset: 7}}>\r\n                                    <div className=\"form-check\">\r\n                                        <Label check>\r\n                                             <Control.checkbox model=\".agree\" className=\"form-check-input\" name=\"agree\" />\r\n                                              <strong>May we contact you?</strong>\r\n                                        </Label>\r\n                                    </div>\r\n                               </Col>\r\n                               <Col mod={{size: 1, offset: 1}}>\r\n                                     <Control.select model=\".contactType\" className=\"form-control\" name=\"contactType\">\r\n                                        <option>Tel.</option>\r\n                                        <option>Email</option>\r\n                                    </Control.select>\r\n                                </Col>\r\n                \r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                 <Label htmlFor=\"message\" md={2}>Your Feedback</Label>\r\n                               <Col md={10}>\r\n                                    <Control.textarea model=\".message\" id=\"message\" rows=\"12\" className=\"form-control\" name=\"message\" />\r\n                               </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Col md={{size:4, offset: 3}}>\r\n                                    <Button type=\"submit\" color=\"primary\">\r\n                                    Send Feedback\r\n                                    </Button>\r\n                                </Col>\r\n                                <Col md={{size:4, offset: 1}}>\r\n                                    <Button type=\"cancel\" class=\"close\" onClick={this.props.resetFeedbackForm()} color=\"secondary\" >\r\n                                        Cancel</Button>\r\n \r\n                                </Col>\r\n                            </Row>\r\n                        </Form>\r\n                    </div>\r\n                 </div>\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n/*\r\n<Form onSubmit={this.handleSubmit}>\r\n                            <FormGroup row>\r\n                                <Label htmlFor=\"firstname\" md={2}>First Name</Label>\r\n                                <Col md={10}>\r\n                                    <Input type=\"text\" id=\"firstname\" name=\"firstname\"\r\n                                        placeholder=\"First Name\"\r\n                                        value={this.state.firstname}\r\n                                        valid={errors.firstname === ''}\r\n                                        invalid={errors.firstname !== ''}\r\n                                        onBlur={this.handleBlur('firstname')}\r\n                                        onChange={this.handleInputChange} required />\r\n                                        <FormFeedback>{errors.firstname}</FormFeedback>\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Label htmlFor=\"lastname\" md={2}>Last Name</Label>\r\n                                <Col md={10}>\r\n                                    <Input type=\"text\" id=\"lastname\" name=\"lastname\"\r\n                                        placeholder=\"Last Name\"\r\n                                        value={this.state.lastname}\r\n                                        valid={errors.lastname === ''}\r\n                                        invalid={errors.lastname !== ''}\r\n                                        onBlur={this.handleBlur('lastname')}\r\n                                        onChange={this.handleInputChange} required />\r\n                                        <FormFeedback>{errors.lastname}</FormFeedback>\r\n                                </Col>                        \r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                            <Label htmlFor=\"telnum\" md={2}>Contact Tel.</Label>\r\n                                <Col md={10}>\r\n                                    <Input type=\"tel\" id=\"telnum\" name=\"telnum\"\r\n                                        placeholder=\"Tel. number\"\r\n                                        value={this.state.telnum}\r\n                                        valid={errors.telnum === ''}\r\n                                        invalid={errors.telnum !== ''}\r\n                                        onBlur={this.handleBlur('telnum')}\r\n                                        onChange={this.handleInputChange} required />\r\n                                        <FormFeedback>{errors.telnum}</FormFeedback>\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Label htmlFor=\"email\" md={2}>Email</Label>\r\n                                <Col md={10}>\r\n                                    <Input type=\"email\" id=\"email\" name=\"email\"\r\n                                        placeholder=\"Email\"\r\n                                        value={this.state.email}\r\n                                        valid={errors.email === ''}\r\n                                        invalid={errors.email !== ''}\r\n                                        onBlur={this.handleBlur('email')}\r\n                                        onChange={this.handleInputChange} required />\r\n                                        <FormFeedback>{errors.email}</FormFeedback>\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Col md={{size: 6, offset: 2}}>\r\n                                    <FormGroup check>\r\n                                        <Label check>\r\n                                            <Input type=\"checkbox\"\r\n                                                name=\"agree\"\r\n                                                checked={this.state.agree}\r\n                                                onChange={this.handleInputChange} /> {' '}\r\n                                            <strong>May we contact you?</strong>\r\n                                        </Label>\r\n                                    </FormGroup>\r\n                                </Col>\r\n                                <Col md={{size: 3, offset: 1}}>\r\n                                    <Input type=\"select\" name=\"contactType\"\r\n                                            value={this.state.contactType}\r\n                                            onChange={this.handleInputChange}>\r\n                                        <option>Tel.</option>\r\n                                        <option>Email</option>\r\n                                    </Input>\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Label htmlFor=\"message\" md={2}>Your Feedback</Label>\r\n                                <Col md={10}>\r\n                                    <Input type=\"textarea\" id=\"message\" name=\"message\"\r\n                                        rows=\"12\"\r\n                                        value={this.state.message}\r\n                                        onChange={this.handleInputChange}></Input>\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Col md={{size: 10, offset: 2}}>\r\n                                    <Button type=\"submit\" color=\"primary\">\r\n                                        Send Feedback\r\n                                    </Button>\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Form>\r\n*/\r\n  \r\n\r\n\r\nexport default Contact;","E:\\Coursera_React\\React\\confusio\\src\\App.js",[],"E:\\Coursera_React\\React\\confusio\\src\\redux\\promotions.js",[],"E:\\Coursera_React\\React\\confusio\\src\\components\\HeaderComponent.js",[],"E:\\Coursera_React\\React\\confusio\\src\\components\\DishdetailComponent.js",["135","136","137","138"],"import React, { Component } from 'react';\r\nimport { Card, CardImg,  CardText, CardBody,CardTitle, Breadcrumb, BreadcrumbItem, Button, Modal,\r\n     ModalBody, ModalHeader, Label, Col, Row  } from 'C:/Users/vivek/node_modules/reactstrap';\r\n  import { Link } from 'C:/Users/vivek/node_modules/react-router-dom';\r\nimport { Control, LocalForm, Errors } from 'C:/Users/vivek/node_modules/react-redux-form';\r\nimport { Loading } from './LoadingComponent';\r\nimport { baseUrl } from '../shared/baseUrl';\r\nimport { FadeTransform, Fade, Stagger } from 'C:/Users/vivek/node_modules/react-animation-components';\r\nconst required = (val) => val && val.length;\r\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\r\nconst minLength = (len) => (val) => (val) && (val.length >= len);\r\n\r\n\r\n    function RenderDish({dish}) {\r\n        if (dish != null)\r\n            return(\r\n                < div >\r\n                <FadeTransform\r\n                in\r\n                transformProps={{\r\n                    exitTransform: 'scale(0.5) translateY(-50%)'\r\n                }}>\r\n                <Card>\r\n                    <CardImg top src={baseUrl + dish.image} alt={dish.name} />\r\n                    <CardBody>\r\n                      <CardTitle>{dish.name}</CardTitle>\r\n                      <CardText>{dish.description}</CardText>\r\n                    </CardBody>\r\n                </Card>\r\n                </FadeTransform>\r\n             </div>\r\n            );\r\n        else\r\n            return(\r\n                <div></div>\r\n            );\r\n    }\r\n\r\n    function RenderComments({comments, postComment, dishId}){\r\n        if(comments != null){\r\n           \r\n            const dishDetailComponent = comments.map((comment) =>{\r\n                return(\r\n                    <Fade in>\r\n                    <li key = {comment.id}>\r\n                        <p>{comment.comment}</p>\r\n                        <p>-- {comment.author}, \r\n                        {new Intl.DateTimeFormat('en-US', { year: 'numeric', month: 'short', day: '2-digit'}).format(new Date(Date.parse(comment.date)))}</p>\r\n                    </li>\r\n                    </Fade>\r\n                );\r\n\r\n            });\r\n            \r\n            return(\r\n                <div className=\"\">\r\n                    \r\n                    <h4>Comments</h4>\r\n                    <ul className=\"list-unstyled\" >\r\n                    <Stagger in>\r\n                        {dishDetailComponent}\r\n                        </Stagger>\r\n                    </ul>\r\n                    \r\n                    <CommentForm dishId={dishId} postComment={postComment}  />\r\n                </div>\r\n            );\r\n        }\r\n        else{\r\n            return(\r\n                <div>\r\n\r\n                </div>\r\n            );\r\n        }\r\n\r\n    }\r\n    const DishDetail = (props)=> {\r\n        if (props.isLoading) {\r\n            return(\r\n                <div className=\"container\">\r\n                    <div className=\"row\">            \r\n                        <Loading />\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        else if (props.errMess) {\r\n            return(\r\n                <div className=\"container\">\r\n                    <div className=\"row\">            \r\n                        <h4>{props.errMess}</h4>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        else if(props.dish != null){\r\n            return(\r\n                <div className=\"container\">\r\n                     <div className=\"row\">\r\n                        <Breadcrumb>\r\n                            <BreadcrumbItem><Link to=\"/menu\">Menu</Link></BreadcrumbItem>\r\n                            <BreadcrumbItem active>{props.dish.name}</BreadcrumbItem>\r\n                        </Breadcrumb>\r\n                      <div className=\"col-12\">\r\n                           <h3>{props.dish.name}</h3>\r\n                           <hr />\r\n                        </div>                \r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12 col-md-5 m-1\">\r\n                          <RenderDish dish={props.dish} />\r\n                          \r\n                        </div>\r\n                        <div className=\"col-12 col-md-5 m-1\">\r\n                          \r\n                          <RenderComments comments={props.comments} \r\n                                postComment={props.postComment}\r\n                                dishId={props.dish.id}    \r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        else{\r\n            return(\r\n                <div>\r\n\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n\r\n\r\n class CommentForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.toggleModal = this.toggleModal.bind(this);\r\n        this.state = {\r\n            isModalOpen: false\r\n        };\r\n    }\r\n\r\n    toggleModal() {\r\n        this.setState({\r\n            isModalOpen: !this.state.isModalOpen\r\n        });\r\n    }\r\n\r\n    handleSubmit(values) {\r\n        this.toggleModal();\r\n        // console.log('Current State is: ' + JSON.stringify(values));\r\n        // alert('Current State is: ' + JSON.stringify(values));\r\n       \r\n        this.props.postComment(this.props.dishId, values.rating, values.author, values.comment);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Button color=\"secondary\" outline onClick={this.toggleModal}>\r\n                    <span className=\"fa fa-pencil fa-lg\">Submit Comment</span>\r\n                </Button>\r\n                <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\r\n                    <ModalHeader toggle={this.toggleModal}>Submit Comment</ModalHeader>\r\n                    <ModalBody>\r\n                        <LocalForm onSubmit={(values) => this.handleSubmit(values)}>\r\n                            <Row className=\"form-group\">\r\n                                <Label md={12} htmlFor=\"rating\">Rating</Label>\r\n                                <Col md={12}>\r\n                                    <Control.select model=\".rating\" name=\"rating\" className=\"form-control\">\r\n                                        <option>1</option>\r\n                                        <option>2</option>\r\n                                        <option>3</option>\r\n                                        <option>4</option>\r\n                                        <option>5</option>\r\n                                    </Control.select>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label md={12} htmlFor=\"author\">Your Name</Label>\r\n                                <Col md={12}>\r\n                                    <Control.text model=\".author\" id=\"author\" name=\"author\"\r\n                                        placeholder=\"Your Name\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                             minLength: minLength(3), maxLength: maxLength(15)\r\n                                        }}\r\n                                    />\r\n                                    <Errors className=\"text-danger\" model=\".author\" show=\"touched\" \r\n                                        messages={{\r\n                                            required: 'Required ',\r\n                                            minLength: 'Must be greater than 3 characters',\r\n                                            maxLength: 'Must be 15 characters or less'\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label md={12} htmlFor=\"comment\">Comment</Label>\r\n                                <Col md={12}>\r\n                                    <Control.textarea model=\".comment\" id=\"comment\" name=\"comment\"\r\n                                        rows=\"6\" \r\n                                        className=\"form-control\"\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Button type=\"submit\" value=\"submit\" color=\"primary\">Submit</Button>\r\n                        </LocalForm>\r\n                    </ModalBody>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default DishDetail ;","E:\\Coursera_React\\React\\confusio\\src\\redux\\dishes.js",[],"E:\\Coursera_React\\React\\confusio\\src\\components\\LoadingComponent.js",[],"E:\\Coursera_React\\React\\confusio\\src\\components\\MenuComponent.js",[],"E:\\Coursera_React\\React\\Confusio\\src\\index.js",[],["139","140"],"E:\\Coursera_React\\React\\Confusio\\src\\components\\HeaderComponent.js",[],"E:\\Coursera_React\\React\\Confusio\\src\\components\\FooterComponent.js",[],"E:\\Coursera_React\\React\\Confusio\\src\\components\\HomeComponent.js",[],"E:\\Coursera_React\\React\\Confusio\\src\\redux\\dishes.js",[],"E:\\Coursera_React\\React\\Confusio\\src\\components\\AboutComponent.js",[],"E:\\Coursera_React\\React\\Confusio\\src\\components\\LoadingComponent.js",[],"E:\\Coursera_React\\React\\Confusio\\src\\redux\\ActionTypes.js",[],"E:\\Coursera_React\\React\\Confusio\\src\\shared\\baseUrl.js",[],"E:\\Coursera_React\\React\\Confusio\\src\\shared\\dishes.js",[],"E:\\Coursera_React\\React\\Confusio\\src\\components\\MainComponent.js",[],"E:\\Coursera_React\\React\\Confusio\\src\\components\\DishdetailComponent.js",["141","142","143","144"],"E:\\Coursera_React\\React\\Confusio\\src\\redux\\comments.js",[],"E:\\Coursera_React\\React\\confusio\\src\\shared\\baseUrl.js",[],"E:\\Coursera_React\\React\\confusio\\src\\reportWebVitals.js",[],{"ruleId":"145","replacedBy":"146"},{"ruleId":"147","replacedBy":"148"},{"ruleId":"145","replacedBy":"149"},{"ruleId":"147","replacedBy":"150"},{"ruleId":"151","severity":1,"message":"152","line":2,"column":10,"nodeType":"153","messageId":"154","endLine":2,"endColumn":16},{"ruleId":"151","severity":1,"message":"155","line":5,"column":34,"nodeType":"153","messageId":"154","endLine":5,"endColumn":41},{"ruleId":"156","severity":1,"message":"157","line":122,"column":29,"nodeType":"158","endLine":122,"endColumn":71},{"ruleId":"159","severity":1,"message":"160","line":136,"column":37,"nodeType":"158","endLine":142,"endColumn":44},{"ruleId":"159","severity":1,"message":"160","line":158,"column":37,"nodeType":"158","endLine":164,"endColumn":44},{"ruleId":"159","severity":1,"message":"160","line":180,"column":37,"nodeType":"158","endLine":186,"endColumn":44},{"ruleId":"159","severity":1,"message":"160","line":203,"column":37,"nodeType":"158","endLine":209,"endColumn":44},{"ruleId":"159","severity":1,"message":"161","line":225,"column":46,"nodeType":"158","endLine":225,"endColumn":123},{"ruleId":"159","severity":1,"message":"162","line":231,"column":38,"nodeType":"158","endLine":231,"endColumn":119},{"ruleId":"159","severity":1,"message":"163","line":241,"column":37,"nodeType":"158","endLine":241,"endColumn":137},{"ruleId":"151","severity":1,"message":"164","line":9,"column":7,"nodeType":"153","messageId":"154","endLine":9,"endColumn":15},{"ruleId":"159","severity":1,"message":"162","line":174,"column":37,"nodeType":"158","endLine":174,"endColumn":108},{"ruleId":"159","severity":1,"message":"160","line":186,"column":37,"nodeType":"158","endLine":192,"endColumn":39},{"ruleId":"159","severity":1,"message":"163","line":205,"column":37,"nodeType":"158","endLine":208,"endColumn":39},{"ruleId":"145","replacedBy":"165"},{"ruleId":"147","replacedBy":"166"},{"ruleId":"151","severity":1,"message":"164","line":9,"column":7,"nodeType":"153","messageId":"154","endLine":9,"endColumn":15},{"ruleId":"159","severity":1,"message":"162","line":174,"column":37,"nodeType":"158","endLine":174,"endColumn":108},{"ruleId":"159","severity":1,"message":"160","line":186,"column":37,"nodeType":"158","endLine":192,"endColumn":39},{"ruleId":"159","severity":1,"message":"163","line":205,"column":37,"nodeType":"158","endLine":208,"endColumn":39},"no-native-reassign",["167"],"no-negated-in-lhs",["168"],["167"],["168"],"no-unused-vars","'DISHES' is defined but never used.","Identifier","unusedVar","'actions' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","react/jsx-pascal-case","Imported JSX component text must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component checkbox must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component select must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component textarea must be in PascalCase or SCREAMING_SNAKE_CASE","'required' is assigned a value but never used.",["167"],["168"],"no-global-assign","no-unsafe-negation"]